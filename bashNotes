
substring
----------

${i:index}     .. substring of i starting at index(0-based)
${i:index:len} .. substring of i starting at index(0-based) for length len

is substring in string
----------------------
if [[ $string == *"My long"* ]]
then
  echo "It's there!";
fi

Filenames and extractions
------------------------

filename=$(basename "$fullpathfile")
dirname=$(dirname "$fullpathfile")
extension="${filename##*.}"
filename="${filename%.*}"


Arrays
------

index is a number. Gaps are okay when initializing. those members dont exist

#remember the flow-brace after dollar and before arr-name.

${Array[index]}

eg:
a=("hello" "world")
echo ${a[0]}   # prints hello
echo ${#a[@]}  # prints 2. Note where # appears
for i in ${a[@]} ; do echo happy $i ; done #  iterates.

Iterating over each line of a  file
-----------------------------------

while read i ; do echo "one line: $i" ; done < file

Note: for i in $(cat line) .. will interate over each word of the file, not line!
Note: cat file | while     .. wont cut it as while will work in a bash of its own and variables modifed inside
                                         while wont be seen by this bash.

echo with colors
----------------

https://en.wikipedia.org/wiki/Tput

tput setaf

reset:
tput sgr0

Getting yes/no or other inputs from user
----------------------------------------

echo "Do you wish to install this program?"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) echo "Yay"; break;;
        No ) echo "Nay"; break;;
    esac
done

or

while true; do
    read -p "Do you wish to install this program?" yn
    case $yn in
        [Yy]* ) echo "Yay" ; break;;
        [Nn]* ) echo "Nay" ; break;;
        * ) echo "Please answer yes or no.";;
    esac
done

Find all unique files in 2 folders
-----------------------------------

#this WONT GIVE u if a file is present twice is DIR1 itself but absent in DIR2!
export DIR1=whatever
export DIR2=whatever2
find $DIR1 $DIR2 -type f -exec sha1sum '{}' \+ | sort | uniq -c --check-chars 40 | egrep '^ *1 ' | cut -c 51-

Argument referencing
--------------------

http://zsh.sourceforge.net/Doc/Release/Expansion.html

<Event Designator>:<Word Designator>:<Modifier>

Event Designator - chooses which command

!! last comand
!-n last nth command .. !-1 is same as !-2
!# current command so far


Word Designator - if blank, entire command.

0 - first word (command)
1 - first arg
n - nth arg
$ - last arg

Modifier

a - abs path name
h - like dirname
t - like basename




