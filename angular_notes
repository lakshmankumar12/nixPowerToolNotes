Angular app
===========

3 things to get angular:

1. In html tag, add
      <html ng-app="todoApp">
2. In script, import angular
      <script src="angular.js"></script>
3. Create one or more angular modules:
      var todoApp = angular.module("todoApp", []);
        -> arg: name of module to create, modules needed.

controller

1. Add controller to the body element (or the element that the controller will control!)
      <body ng-controller="ToDoCtrl">

2. Create the controller..
     pass the name of controller as arg and the job of the controller (the function)

        todoApp.controller("ToDoCtrl", function ($scope) {
                        $scope.todo = model;
                                });

        todoApp.constant("nameOfVariable", "valueOfVariable")     -> Adds this variable which u can use in controller
               .controller("CtrlName" , function ($scope, $filter, nameOfVariable) ..  -> Note the passing of var to the controller's fn.

The object assigned in the controller can be later used in the HTML element

 directly  --  <h1>{{todo.user}}/<h1>
 expresssion --  {{todo.items.len}}
 directives:

                <tr ng-repeat="item in todo.items">
                    <td>{{item.action}}</td>
                    <td>{{item.done}}</td>
                </tr>

  you can also call functions that are available in the $scope

  ng-hide="expression" --> if true will hide the element.

  ng-class="some_function_in_controller()"   --> is a way to seletively apply a class to an element.

Filters
=======

You create a module and then create a filter in it.


angluar.module("ModuleName",[]).filter("filterName", function() { return another_function; } )

The another_function should take args - data being asked to format, and any additional arg
Changed made to the data in the filter function, only affect the view's data.. not the model's data.
Invoking the filter in a directive

            <a ng-repeat="item in data.products | orderBy:'category' | unique:'category'" ...

Built-in filters
----------------

orderBy: "propertyName"    (Filters an array of objects based on object.propertyName)
filter:  "Function"        (Invokes the given function on the collection. Its upto the funciton to select a subset from there)

   The filter is another way to implement. You an either add a module(..).filter(..) or pass a $filter to your controller, and then invoke filter: function.
